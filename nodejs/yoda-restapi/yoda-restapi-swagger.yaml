openapi: 3.0.0
info:
  title: Yoda REST API
  description: Simplified REST API towards GitHub issues at product level. Supports issues across multiple repos and provides filtering and aggregation according to configurable rules.
  version: 0.0.2
servers:
  - url: /
    description: Optional server description, e.g. Main (production) server
# https://swagger.io/docs/specification/authentication/bearer-authentication/
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema: 
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: An internal error has occured while processing the request
      content:
        application/json:
          schema: 
            type: object
            properties:
              message:
                type: string

security:
  - bearerAuth: []         # use the same name as above
paths:
  /products:
    get:
      summary: Returns a list of products
      description: List of Product supported by the API
      responses:
        '200':    # status code
          description: A JSON array of products
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    product:
                      type: string
                    product_name:
                      type: string
                    product_family:
                      type: string
                    components:
                      type: array
                      items: 
                        type: object
                        properties:
                          component:
                            type: string
                          component_name:
                            type: string

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /queries:
    get:
      summary: Returns a list of stored queries
      description: List of stored queries supported by the API
      responses:
        '200':    # status code
          description: A JSON array of queries
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    query:
                      type: string
                    description:
                      type: string
                    parameters:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /issues:
    get:
      summary: Return GitHub issues associated with products
      description: Return GitHub issues mapped according to specified filters and view
      parameters:
        - name: query
          in: query
          description: Use a stored query which can define any of the parameters below. Use queries endpoint to see queries. Comma-separated list for more queries (must be mutually exclusive)
          schema:
            type: string
        - name: fields
          in: query
          description: Comma separated list of issue fields to return - these can GitHub issue fields or synthetized fields. All fields if omitted
          schema:
            type: string
        - name: product
          in: query
          description: Product(s) to use for scoping GitHub issues. Comma-separated list for more products. Omit to get all.
          schema:
            type: string
        - name: component
          in: query
          description: Components(s) to use for scoping GitHub issues. Comma-separated list for more components. Omit to get all (subject to any product search)
          schema:
            type: string
        - name: state
          in: query
          description: Issue states to target. Possible values are 'open', 'closed', or 'all'. Default 'open'
          schema:
            type: string
            pattern: '^(open|closed|all)$'
        - name: labels
          in: query
          description: A list of comma separated label names to use in filtering. Example 'T1 - Defect,Support,-S4 - Low'
          schema:
            type: string
        - name: since
          in: query
          description: Only show issues with update after the given time. This is a timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ
          schema:
            type: string
        - name: regexp_filter
          in: query
          description: Filter issue based on labels using regular expressions. Comma separate (AND) for severral, - for negative. Example '^C -,-^Th -'
          schema:
            type: string

      responses:
        '200':    # status code
          description: A JSON array of issues with fields as per parameters
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: string
                    node_id:
                      type: string
                    product:
                      type: string
                    product_name:
                      type: string
                    component:
                      type: string
                    repository:
                      type: string
                    product_family:
                      type: string
                    state:
                      type: string
                    type:
                      type: string
                    severity:
                      type: string
                    title:
                      type: string
                    created_at:
                      type: string
                    closed_at:
                      type: string
                    updated_at:
                      type: string
                    support:
                      type: boolean
                    origin:
                      type: string
                    company:
                      type: string
                    support_id:
                      type: string
                    milestone:
                      type: string
                    user:
                      type: string
                    assignee:
                      type: string
                    html_url:
                      type: string
        '400':    # status code
          description: Bad request
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
